# In this SQL code, I created my own table with some small set of “famous people”, then make more tables about things they do and join those to create nice human readable lists.

#Creating a table listing artists:
CREATE TABLE artists (
    id INTEGER PRIMARY KEY,
    artist TEXT,
    collaboration_id INTEGER)
    ;

#Inserting values into the artists table:
INSERT INTO artists VALUES
    (1, "BTS", 2),
    (2, "Blackpink", 1),
    (3, "Ariana Grande", 4),
    (4, "Justin Bieber", 3),
    (5, "Olivia Rodrigo", 8),
    (6, "Doja Cat", 7),
    (7, "SZA", 6),
    (8, "Bruno Mars", 5)
    ; 

#Select all to see what the whole table looks like.
SELECT * FROM artists
    ;

#Creating a table listing genres:
CREATE TABLE genre (
    id INTEGER PRIMARY KEY,
    genre TEXT)
    ;

#Inserting values into the genre table:
INSERT INTO genre VALUES 
    (1, "kpop"),
    (2, "pop"),
    (3, "indie"),
    (4, "R&B")
    ;

#Select all to see what the whole table looks like.
SELECT * FROM genre;

#Creating a table listing hit songs:
CREATE TABLE hit_songs (
    id INTEGER PRIMARY KEY,
    artist_id INTEGER,
    hit_song TEXT)
    ;

#Inserting values into the hit songs table:
INSERT INTO hit_songs VALUES
    (1, 2, "Kill This Love"),
    (2, 1, "Butter"),
    (3, 4, "STAY"),
    (4, 3, "7 Rings"),
    (5, 6, "drivers license"),
    (6, 5, "Kiss Me More"),
    (7, 8, "Good Days"),
    (8, 7, "Leave The Door Open")
    ;

#Select all to see what the whole table looks like.
SELECT * FROM hit_songs;

#Creating a table listing what country the artists' are from:
CREATE TABLE origin (
    id INTEGER PRIMARY KEY,
    country TEXT)
    ;

#Inserting values into the country origin table:
INSERT INTO origin VALUES 
    (1, "South Korea"),
    (2, "USA"),
    (3, "Canada")
    ;

#Select all to see what the whole table looks like.
SELECT * FROM origin
    ;

#Creating a table that relates all artists with their genre and country origins:
CREATE TABLE artist_genre_origin
    (id INTEGER PRIMARY KEY,
    artist_id INTEGER,
    genre_id INTEGER,
    origin_id INTEGER)
    ;

#Inserting values into the table:
INSERT INTO artist_genre_origin VALUES
    (1, 1, 1, 1),
    (2, 2,  1, 1),
    (3, 3,  2, 2),
    (4, 4,  2, 3),
    (5, 5,  3, 2),
    (6, 6,  4, 2),
    (7, 7,  4, 2),
    (8, 8, 4, 2)
    ;

#Select all to see what the whole table looks like.
SELECT * FROM artist_genre_origin
    ;


#Next, I explored the data using the following SQL.


#JOINing related tables: come up with a query that shows the artist name next to their hit song.
SELECT a.artist, hs.hit_song FROM artists AS a
    JOIN hit_songs AS hs
    ON a.id = hs.artist_id
    ;

#Combining multiple JOINs: come up with a query that shows the artist name next to their genre and origin id.
SELECT a.artist, g.genre, o.country FROM artist_genre_origin AS ago
    JOIN artists AS a
    ON ago.artist_id = a.id
    JOIN genre AS g
    ON ago.genre_id = g.id
    JOIN origin As o
    ON ago.origin_id = o.id
    ;

#JOINing tables to themselves with self-joins: come up with a query that shows the artist name next to the name of the artist they are assigned to collaborate music with.
SELECT artists.artist AS artist_name, collab.artist AS collab_partner FROM artists
    JOIN artists collab
    ON artists.collaboration_id = collab.id
    ;






